"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class PredictionMsg(object):

    __slots__ = ["leg_1_pred", "leg_2_pred", "leg_3_pred", "leg_4_pred"]

    __typenames__ = ["double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.leg_1_pred = 0.0
        """ LCM Type: double """
        self.leg_2_pred = 0.0
        """ LCM Type: double """
        self.leg_3_pred = 0.0
        """ LCM Type: double """
        self.leg_4_pred = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(PredictionMsg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddd", self.leg_1_pred, self.leg_2_pred, self.leg_3_pred, self.leg_4_pred))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PredictionMsg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PredictionMsg._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PredictionMsg()
        self.leg_1_pred, self.leg_2_pred, self.leg_3_pred, self.leg_4_pred = struct.unpack(">dddd", buf.read(32))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PredictionMsg in parents: return 0
        tmphash = (0x7bb6e67b060ce325) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PredictionMsg._packed_fingerprint is None:
            PredictionMsg._packed_fingerprint = struct.pack(">Q", PredictionMsg._get_hash_recursive([]))
        return PredictionMsg._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PredictionMsg._get_packed_fingerprint())[0]

