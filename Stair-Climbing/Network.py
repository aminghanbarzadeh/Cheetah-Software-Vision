"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class Network(object):
    __slots__ = ["cycletime", "bezierheight", "delta", "runstairs", "pitch_ascension", "offsety", "xvelocity", "zvelocity", "timestep"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.cycletime = 0
        self.bezierheight = 0.0
        self.delta = 0.0
        self.runstairs = 0.0
        self.pitch_ascension = 0.0
        self.offsety = 0.0
        self.xvelocity = 0.0
        self.zvelocity = 0.0
        self.timestep = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(Network._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddddddd", self.cycletime, self.bezierheight, self.delta, self.runstairs, self.pitch_ascension, self.offsety, self.xvelocity, self.zvelocity, self.timestep))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Network._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Network._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Network()
        self.cycletime, self.bezierheight, self.delta, self.runstairs, self.pitch_ascension, self.offsety, self.xvelocity, self.zvelocity, self.timestep = struct.unpack(">qdddddddd", buf.read(72))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Network in parents: return 0
        tmphash = (0xa609f9e068830cfa) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Network._packed_fingerprint is None:
            Network._packed_fingerprint = struct.pack(">Q", Network._get_hash_recursive([]))
        return Network._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

